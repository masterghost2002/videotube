// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package database

import (
	"context"
	"database/sql"
)

const createChannel = `-- name: CreateChannel :one
INSERT INTO channel (user_id, name, logo, subscriber_count)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, name, logo, subscriber_count, created_at, updated_at
`

type CreateChannelParams struct {
	UserID          int64
	Name            string
	Logo            sql.NullString
	SubscriberCount sql.NullInt64
}

// channel.sql
func (q *Queries) CreateChannel(ctx context.Context, arg CreateChannelParams) (Channel, error) {
	row := q.db.QueryRowContext(ctx, createChannel,
		arg.UserID,
		arg.Name,
		arg.Logo,
		arg.SubscriberCount,
	)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Logo,
		&i.SubscriberCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createComment = `-- name: CreateComment :one
INSERT INTO comment (text, video_id, user_id, parent_id, replies_count)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, text, video_id, user_id, parent_id, replies_count, created_at
`

type CreateCommentParams struct {
	Text         string
	VideoID      int64
	UserID       int64
	ParentID     sql.NullInt64
	RepliesCount sql.NullInt64
}

// comment.sql
func (q *Queries) CreateComment(ctx context.Context, arg CreateCommentParams) (Comment, error) {
	row := q.db.QueryRowContext(ctx, createComment,
		arg.Text,
		arg.VideoID,
		arg.UserID,
		arg.ParentID,
		arg.RepliesCount,
	)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.VideoID,
		&i.UserID,
		&i.ParentID,
		&i.RepliesCount,
		&i.CreatedAt,
	)
	return i, err
}

const createNotification = `-- name: CreateNotification :one
INSERT INTO notification (user_id, type, content, status)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, type, content, status, created_at, updated_at
`

type CreateNotificationParams struct {
	UserID  int64
	Type    NullNotificationtype
	Content string
	Status  NullNotificationstatus
}

// notification.sql
func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification,
		arg.UserID,
		arg.Type,
		arg.Content,
		arg.Status,
	)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createSubscription = `-- name: CreateSubscription :one
INSERT INTO subscriptions (user_id, channel_id)
VALUES ($1, $2)
RETURNING id, user_id, channel_id, subscribed_at, created_at
`

type CreateSubscriptionParams struct {
	UserID    int64
	ChannelID int64
}

// subscriptions.sql
func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, createSubscription, arg.UserID, arg.ChannelID)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChannelID,
		&i.SubscribedAt,
		&i.CreatedAt,
	)
	return i, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (username, full_name, email, password, profile_url, channel_id)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, username, full_name, email, password, profile_url, channel_id, created_at, updated_at
`

type CreateUserParams struct {
	Username   string
	FullName   string
	Email      string
	Password   string
	ProfileUrl sql.NullString
	ChannelID  sql.NullInt64
}

// users.sql
func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.ProfileUrl,
		arg.ChannelID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.ProfileUrl,
		&i.ChannelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createVideo = `-- name: CreateVideo :one
INSERT INTO video (title, description, status, comments_available, duration_seconds, thumbnail, _1080p_url, _720p_url, _480p_url, _360p_url, channel_id)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11)
RETURNING id, title, description, status, comments_available, duration_seconds, thumbnail, _1080p_url, _720p_url, _480p_url, _360p_url, channel_id, created_at, updated_at
`

type CreateVideoParams struct {
	Title             string
	Description       sql.NullString
	Status            NullVideostatus
	CommentsAvailable sql.NullBool
	DurationSeconds   sql.NullInt64
	Thumbnail         sql.NullString
	_1080pUrl         sql.NullString
	_720pUrl          sql.NullString
	_480pUrl          sql.NullString
	_360pUrl          sql.NullString
	ChannelID         int64
}

// video.sql
func (q *Queries) CreateVideo(ctx context.Context, arg CreateVideoParams) (Video, error) {
	row := q.db.QueryRowContext(ctx, createVideo,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.CommentsAvailable,
		arg.DurationSeconds,
		arg.Thumbnail,
		arg._1080pUrl,
		arg._720pUrl,
		arg._480pUrl,
		arg._360pUrl,
		arg.ChannelID,
	)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CommentsAvailable,
		&i.DurationSeconds,
		&i.Thumbnail,
		&i._1080pUrl,
		&i._720pUrl,
		&i._480pUrl,
		&i._360pUrl,
		&i.ChannelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createWatchHistory = `-- name: CreateWatchHistory :one
INSERT INTO watch_history (user_id, video_id, watched_at)
VALUES ($1, $2, $3)
RETURNING id, user_id, video_id, watched_at, created_at, updated_at
`

type CreateWatchHistoryParams struct {
	UserID    int64
	VideoID   int64
	WatchedAt sql.NullTime
}

// watch_history.sql
func (q *Queries) CreateWatchHistory(ctx context.Context, arg CreateWatchHistoryParams) (WatchHistory, error) {
	row := q.db.QueryRowContext(ctx, createWatchHistory, arg.UserID, arg.VideoID, arg.WatchedAt)
	var i WatchHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.VideoID,
		&i.WatchedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteChannel = `-- name: DeleteChannel :exec
DELETE FROM channel
WHERE id = $1
`

func (q *Queries) DeleteChannel(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteChannel, id)
	return err
}

const deleteComment = `-- name: DeleteComment :exec
DELETE FROM comment
WHERE id = $1
`

func (q *Queries) DeleteComment(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteComment, id)
	return err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notification
WHERE id = $1
`

func (q *Queries) DeleteNotification(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, id)
	return err
}

const deleteSubscription = `-- name: DeleteSubscription :exec
DELETE FROM subscriptions
WHERE user_id = $1 AND channel_id = $2
`

type DeleteSubscriptionParams struct {
	UserID    int64
	ChannelID int64
}

func (q *Queries) DeleteSubscription(ctx context.Context, arg DeleteSubscriptionParams) error {
	_, err := q.db.ExecContext(ctx, deleteSubscription, arg.UserID, arg.ChannelID)
	return err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const deleteVideo = `-- name: DeleteVideo :exec
DELETE FROM video
WHERE id = $1
`

func (q *Queries) DeleteVideo(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteVideo, id)
	return err
}

const deleteWatchHistory = `-- name: DeleteWatchHistory :exec
DELETE FROM watch_history
WHERE id = $1
`

func (q *Queries) DeleteWatchHistory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteWatchHistory, id)
	return err
}

const getChannelById = `-- name: GetChannelById :one
SELECT id, user_id, name, logo, subscriber_count, created_at, updated_at
FROM channel
WHERE id = $1
`

func (q *Queries) GetChannelById(ctx context.Context, id int64) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelById, id)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Logo,
		&i.SubscriberCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannelByUserId = `-- name: GetChannelByUserId :one
SELECT id, user_id, name, logo, subscriber_count, created_at, updated_at
FROM channel
WHERE user_id = $1
`

func (q *Queries) GetChannelByUserId(ctx context.Context, userID int64) (Channel, error) {
	row := q.db.QueryRowContext(ctx, getChannelByUserId, userID)
	var i Channel
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.Logo,
		&i.SubscriberCount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getChannels = `-- name: GetChannels :many
SELECT id, user_id, name, logo, subscriber_count, created_at, updated_at
FROM channel
`

func (q *Queries) GetChannels(ctx context.Context) ([]Channel, error) {
	rows, err := q.db.QueryContext(ctx, getChannels)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Channel
	for rows.Next() {
		var i Channel
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.Logo,
			&i.SubscriberCount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCommentById = `-- name: GetCommentById :one
SELECT id, text, video_id, user_id, parent_id, replies_count, created_at
FROM comment
WHERE id = $1
`

func (q *Queries) GetCommentById(ctx context.Context, id int64) (Comment, error) {
	row := q.db.QueryRowContext(ctx, getCommentById, id)
	var i Comment
	err := row.Scan(
		&i.ID,
		&i.Text,
		&i.VideoID,
		&i.UserID,
		&i.ParentID,
		&i.RepliesCount,
		&i.CreatedAt,
	)
	return i, err
}

const getCommentsByVideoId = `-- name: GetCommentsByVideoId :many
SELECT id, text, video_id, user_id, parent_id, replies_count, created_at
FROM comment
WHERE video_id = $1
`

func (q *Queries) GetCommentsByVideoId(ctx context.Context, videoID int64) ([]Comment, error) {
	rows, err := q.db.QueryContext(ctx, getCommentsByVideoId, videoID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Comment
	for rows.Next() {
		var i Comment
		if err := rows.Scan(
			&i.ID,
			&i.Text,
			&i.VideoID,
			&i.UserID,
			&i.ParentID,
			&i.RepliesCount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getNotificationById = `-- name: GetNotificationById :one
SELECT id, user_id, type, content, status, created_at, updated_at
FROM notification
WHERE id = $1
`

func (q *Queries) GetNotificationById(ctx context.Context, id int64) (Notification, error) {
	row := q.db.QueryRowContext(ctx, getNotificationById, id)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Type,
		&i.Content,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getNotificationsByUserId = `-- name: GetNotificationsByUserId :many
SELECT id, user_id, type, content, status, created_at, updated_at
FROM notification
WHERE user_id = $1
`

func (q *Queries) GetNotificationsByUserId(ctx context.Context, userID int64) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, getNotificationsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Notification
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Type,
			&i.Content,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscription = `-- name: GetSubscription :one
SELECT id, user_id, channel_id, subscribed_at, created_at
FROM subscriptions
WHERE id = $1
`

func (q *Queries) GetSubscription(ctx context.Context, id int64) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscription, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ChannelID,
		&i.SubscribedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getSubscriptionsByChannelId = `-- name: GetSubscriptionsByChannelId :many
SELECT id, user_id, channel_id, subscribed_at, created_at
FROM subscriptions
WHERE channel_id = $1
`

func (q *Queries) GetSubscriptionsByChannelId(ctx context.Context, channelID int64) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, getSubscriptionsByChannelId, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChannelID,
			&i.SubscribedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSubscriptionsByUserId = `-- name: GetSubscriptionsByUserId :many
SELECT id, user_id, channel_id, subscribed_at, created_at
FROM subscriptions
WHERE user_id = $1
`

func (q *Queries) GetSubscriptionsByUserId(ctx context.Context, userID int64) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, getSubscriptionsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ChannelID,
			&i.SubscribedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, username, full_name, email, password, profile_url, channel_id, created_at, updated_at
FROM users
WHERE email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.ProfileUrl,
		&i.ChannelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, username, full_name, email, password, profile_url, channel_id, created_at, updated_at
FROM users
WHERE id = $1
`

func (q *Queries) GetUserById(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FullName,
		&i.Email,
		&i.Password,
		&i.ProfileUrl,
		&i.ChannelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getVideoByChannelId = `-- name: GetVideoByChannelId :many
SELECT id, title, description, status, comments_available, duration_seconds, thumbnail, _1080p_url, _720p_url, _480p_url, _360p_url, channel_id, created_at, updated_at
FROM video
WHERE channel_id = $1
`

func (q *Queries) GetVideoByChannelId(ctx context.Context, channelID int64) ([]Video, error) {
	rows, err := q.db.QueryContext(ctx, getVideoByChannelId, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Video
	for rows.Next() {
		var i Video
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.Status,
			&i.CommentsAvailable,
			&i.DurationSeconds,
			&i.Thumbnail,
			&i._1080pUrl,
			&i._720pUrl,
			&i._480pUrl,
			&i._360pUrl,
			&i.ChannelID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getVideoById = `-- name: GetVideoById :one
SELECT id, title, description, status, comments_available, duration_seconds, thumbnail, _1080p_url, _720p_url, _480p_url, _360p_url, channel_id, created_at, updated_at
FROM video
WHERE id = $1
`

func (q *Queries) GetVideoById(ctx context.Context, id int64) (Video, error) {
	row := q.db.QueryRowContext(ctx, getVideoById, id)
	var i Video
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.Status,
		&i.CommentsAvailable,
		&i.DurationSeconds,
		&i.Thumbnail,
		&i._1080pUrl,
		&i._720pUrl,
		&i._480pUrl,
		&i._360pUrl,
		&i.ChannelID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWatchHistoryById = `-- name: GetWatchHistoryById :one
SELECT id, user_id, video_id, watched_at, created_at, updated_at
FROM watch_history
WHERE id = $1
`

func (q *Queries) GetWatchHistoryById(ctx context.Context, id int64) (WatchHistory, error) {
	row := q.db.QueryRowContext(ctx, getWatchHistoryById, id)
	var i WatchHistory
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.VideoID,
		&i.WatchedAt,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getWatchHistoryByUserId = `-- name: GetWatchHistoryByUserId :many
SELECT id, user_id, video_id, watched_at, created_at, updated_at
FROM watch_history
WHERE user_id = $1
`

func (q *Queries) GetWatchHistoryByUserId(ctx context.Context, userID int64) ([]WatchHistory, error) {
	rows, err := q.db.QueryContext(ctx, getWatchHistoryByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WatchHistory
	for rows.Next() {
		var i WatchHistory
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.VideoID,
			&i.WatchedAt,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChannel = `-- name: UpdateChannel :exec
UPDATE channel
SET name = $2, logo = $3, subscriber_count = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateChannelParams struct {
	ID              int64
	Name            string
	Logo            sql.NullString
	SubscriberCount sql.NullInt64
}

func (q *Queries) UpdateChannel(ctx context.Context, arg UpdateChannelParams) error {
	_, err := q.db.ExecContext(ctx, updateChannel,
		arg.ID,
		arg.Name,
		arg.Logo,
		arg.SubscriberCount,
	)
	return err
}

const updateComment = `-- name: UpdateComment :exec
UPDATE comment
SET text = $2, replies_count = $3, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateCommentParams struct {
	ID           int64
	Text         string
	RepliesCount sql.NullInt64
}

func (q *Queries) UpdateComment(ctx context.Context, arg UpdateCommentParams) error {
	_, err := q.db.ExecContext(ctx, updateComment, arg.ID, arg.Text, arg.RepliesCount)
	return err
}

const updateNotification = `-- name: UpdateNotification :exec
UPDATE notification
SET type = $2, content = $3, status = $4, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateNotificationParams struct {
	ID      int64
	Type    NullNotificationtype
	Content string
	Status  NullNotificationstatus
}

func (q *Queries) UpdateNotification(ctx context.Context, arg UpdateNotificationParams) error {
	_, err := q.db.ExecContext(ctx, updateNotification,
		arg.ID,
		arg.Type,
		arg.Content,
		arg.Status,
	)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET username = $2, full_name = $3, email = $4, password = $5, profile_url = $6, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateUserParams struct {
	ID         int64
	Username   string
	FullName   string
	Email      string
	Password   string
	ProfileUrl sql.NullString
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.FullName,
		arg.Email,
		arg.Password,
		arg.ProfileUrl,
	)
	return err
}

const updateVideo = `-- name: UpdateVideo :exec
UPDATE video
SET title = $2, description = $3, status = $4, comments_available = $5, duration_seconds = $6, thumbnail = $7, _1080p_url = $8, _720p_url = $9, _480p_url = $10, _360p_url = $11, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateVideoParams struct {
	ID                int64
	Title             string
	Description       sql.NullString
	Status            NullVideostatus
	CommentsAvailable sql.NullBool
	DurationSeconds   sql.NullInt64
	Thumbnail         sql.NullString
	_1080pUrl         sql.NullString
	_720pUrl          sql.NullString
	_480pUrl          sql.NullString
	_360pUrl          sql.NullString
}

func (q *Queries) UpdateVideo(ctx context.Context, arg UpdateVideoParams) error {
	_, err := q.db.ExecContext(ctx, updateVideo,
		arg.ID,
		arg.Title,
		arg.Description,
		arg.Status,
		arg.CommentsAvailable,
		arg.DurationSeconds,
		arg.Thumbnail,
		arg._1080pUrl,
		arg._720pUrl,
		arg._480pUrl,
		arg._360pUrl,
	)
	return err
}

const updateWatchHistory = `-- name: UpdateWatchHistory :exec
UPDATE watch_history
SET watched_at = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdateWatchHistoryParams struct {
	ID        int64
	WatchedAt sql.NullTime
}

func (q *Queries) UpdateWatchHistory(ctx context.Context, arg UpdateWatchHistoryParams) error {
	_, err := q.db.ExecContext(ctx, updateWatchHistory, arg.ID, arg.WatchedAt)
	return err
}
