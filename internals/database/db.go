// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0

package database

import (
	"context"
	"database/sql"
	"fmt"
	"log"

	_ "github.com/lib/pq"
	config "github.com/masterghost2002/videotube/configs"
)
type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

type Queries struct {
	db DBTX
}
var Storage *Queries

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db: tx,
	}
}
func InitDB() error {
	dsn := fmt.Sprintf("host=%s user=%s password=%s dbname=%s port=%s sslmode=%s sslrootcert=%s ", config.ENVS.DBAddress, config.ENVS.DBUser, config.ENVS.DBPassword, config.ENVS.DBName, config.ENVS.DBPort, config.ENVS.SSLMODE, config.ENVS.CRT_PATH)
	conn, err := sql.Open("postgres", dsn)
	if err != nil{
		return err
	}
	if err := conn.Ping(); err!=nil{
		log.Fatal("failed to connect with database: ", err)
	}

	//wrap up the database in the new of queries
	Storage = New(conn)
	return nil;

}
func GetDB() *Queries{
	return Storage;
}
