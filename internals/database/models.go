// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package database

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
)

type Notificationstatus string

const (
	NotificationstatusREAD   Notificationstatus = "READ"
	NotificationstatusUNREAD Notificationstatus = "UNREAD"
)

func (e *Notificationstatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Notificationstatus(s)
	case string:
		*e = Notificationstatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Notificationstatus: %T", src)
	}
	return nil
}

type NullNotificationstatus struct {
	Notificationstatus Notificationstatus
	Valid              bool // Valid is true if Notificationstatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationstatus) Scan(value interface{}) error {
	if value == nil {
		ns.Notificationstatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Notificationstatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationstatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Notificationstatus), nil
}

type Notificationtype string

const (
	NotificationtypeCOMMENT      Notificationtype = "COMMENT"
	NotificationtypeNEWVIDEO     Notificationtype = "NEW_VIDEO"
	NotificationtypeVIDEOSTATUS  Notificationtype = "VIDEO_STATUS"
	NotificationtypeSUBSCRIPTION Notificationtype = "SUBSCRIPTION"
)

func (e *Notificationtype) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Notificationtype(s)
	case string:
		*e = Notificationtype(s)
	default:
		return fmt.Errorf("unsupported scan type for Notificationtype: %T", src)
	}
	return nil
}

type NullNotificationtype struct {
	Notificationtype Notificationtype
	Valid            bool // Valid is true if Notificationtype is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullNotificationtype) Scan(value interface{}) error {
	if value == nil {
		ns.Notificationtype, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Notificationtype.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullNotificationtype) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Notificationtype), nil
}

type Videostatus string

const (
	VideostatusProcessing Videostatus = "processing"
	VideostatusAvailable  Videostatus = "available"
)

func (e *Videostatus) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Videostatus(s)
	case string:
		*e = Videostatus(s)
	default:
		return fmt.Errorf("unsupported scan type for Videostatus: %T", src)
	}
	return nil
}

type NullVideostatus struct {
	Videostatus Videostatus
	Valid       bool // Valid is true if Videostatus is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullVideostatus) Scan(value interface{}) error {
	if value == nil {
		ns.Videostatus, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Videostatus.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullVideostatus) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.Videostatus), nil
}

type Channel struct {
	ID              int64
	UserID          int64
	Name            string
	Logo            sql.NullString
	SubscriberCount sql.NullInt64
	CreatedAt       sql.NullTime
	UpdatedAt       sql.NullTime
}

type Comment struct {
	ID           int64
	Text         string
	VideoID      int64
	UserID       int64
	ParentID     sql.NullInt64
	RepliesCount sql.NullInt64
	CreatedAt    sql.NullTime
}

type Notification struct {
	ID        int64
	UserID    int64
	Type      NullNotificationtype
	Content   string
	Status    NullNotificationstatus
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

type Subscription struct {
	ID           int64
	UserID       int64
	ChannelID    int64
	SubscribedAt sql.NullTime
	CreatedAt    sql.NullTime
}

type User struct {
	ID         int64
	Username   string
	FullName   string
	Email      string
	Password   string
	ProfileUrl sql.NullString
	ChannelID  sql.NullInt64
	CreatedAt  sql.NullTime
	UpdatedAt  sql.NullTime
}

type Video struct {
	ID                int64
	Title             string
	Description       sql.NullString
	Status            NullVideostatus
	CommentsAvailable sql.NullBool
	DurationSeconds   sql.NullInt64
	Thumbnail         sql.NullString
	_1080pUrl         sql.NullString
	_720pUrl          sql.NullString
	_480pUrl          sql.NullString
	_360pUrl          sql.NullString
	ChannelID         int64
	CreatedAt         sql.NullTime
	UpdatedAt         sql.NullTime
}

type WatchHistory struct {
	ID        int64
	UserID    int64
	VideoID   int64
	WatchedAt sql.NullTime
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}
